Types of Relationships

1.1 One-to-One (1:1)
Each row in Table A is linked to one and only one row in Table B.//Example: User and UserProfile.
1.2 One-to-Many (1:M)
One record in Table A can be linked to many records in Table B.//Example: Department → Employees
1.3 Many-to-Many (M:M)
Many records in Table A can be related to many records in Table B.//Example: Students ↔ Courses (via Enrollments)
Requires a junction (join) table.

Ownership in Relationships
*****In 1:M, the "Many" side is usually the owner.
It contains the foreign key referencing the parent.
Example: In Department (1) → Employee (M), Employee has department_id.

Foreign Key Behavior
A foreign key ensures referential integrity between tables.
Constraint	Effect
NOT NULL / nullable=false//The child must always reference a valid parent. Cannot be null.
Foreign Key Violation	Occurs if child references a non-existent parent ID.

Cascade Types in JPA/Hibernate
**Cascade.PERSIST	Save parent → child saved automatically.
**Cascade.MERGE	Update parent → updates child if changed.
**Cascade.REMOVE	Delete parent → child(ren) also deleted. Use carefully.
**Cascade.DETACH	Parent detached from persistence → child detached too.
**Cascade.ALL	Includes all above. Use with caution – especially REMOVE.
⚠️ Never use CascadeType.ALL blindly, especially in 1:M or M:M.

DDL (Data Definition Language)--DDL defines and modifies structure of database objects
CREATE--Create table, schema, index, view	CREATE TABLE Students (...)
ALTER--Modify structure of existing object	ALTER TABLE ADD COLUMN age
DROP--Delete database objects	DROP TABLE Courses
TRUNCATE--Remove all rows without logging	TRUNCATE TABLE Logs

Relationship betwwen (1:M) Example
CREATE TABLE Department (
    dept_id INT PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE Employee (
    emp_id INT PRIMARY KEY,
    name VARCHAR(100),
    dept_id INT NOT NULL,
    FOREIGN KEY (dept_id) REFERENCES Department(dept_id)
        ON DELETE CASCADE  -- if department deleted, employees will be too
        ON UPDATE CASCADE
);
